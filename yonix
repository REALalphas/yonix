#!/usr/bin/env bash

VERSION="0.88"

# Prevent re-execution after sudo
SUDO_REEXEC=${SUDO_REEXEC:-false}

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Config file location
NIX_DIR_FILE="$HOME/.config/yonix/nix-dir"

# Create config directory if it doesn't exist
mkdir -p "$HOME/.config/yonix"

# Function to save nix directory
save_nix_dir() {
    # Record the current working directory as the Nix configuration location.
    echo "$(pwd)" > "$NIX_DIR_FILE"
}

# Function to get nix directory
get_nix_dir() {
    # Retrieve the stored Nix configuration directory, or return the default if not set.
    if [ -f "$NIX_DIR_FILE" ]; then
        cat "$NIX_DIR_FILE"
    else
        echo "$HOME/.config/nixos"
    fi
}

# Rename reset directory function
reset_nix_dir() {
    # Remove the saved Nix directory configuration and log the reset operation.
    if [ -f "$NIX_DIR_FILE" ]; then
        rm "$NIX_DIR_FILE"
        log_success "Reset NixOS configuration directory to default"
    else
        log_warning "No saved directory configuration found"
    fi
}

# Logging functions
log_info() {
    # Log an informational message.
    [ "$quiet_mode" = false ] && echo -e "${BLUE}[INFO]${NC} $1"
}
log_success() {
    # Log a success message.
    [ "$quiet_mode" = false ] && echo -e "${GREEN}[SUCCESS]${NC} $1"
}
log_warning() {
    # Log a warning message.
    [ "$quiet_mode" = false ] && echo -e "${YELLOW}[WARNING]${NC} $1"
}
log_error() {
    # Log an error message.
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

# Modified check_sudo to properly pass arguments
check_sudo() {
    # Elevate privileges if the script is not run as root.
    if [ "$EUID" -ne 0 ]; then
        log_info "Elevating privileges..."
        SUDO_REEXEC=true exec sudo -E "$0" "${ORIGINAL_ARGS[@]}"
    fi
}

# Store original arguments
ORIGINAL_ARGS=("$@")

# Braille spinner frames
SPINNER_FRAMES=(⠋ ⠙ ⠹ ⠸ ⠼ ⠴ ⠦ ⠧ ⠇ ⠏)

# Improved spinner function
spinner() {
    # Display a progress spinner while a background process is running.
    local pid=$1
    local message="${2:-Processing}"
    local delay=0.08
    local frame=0

    # Clear line and show initial message
    printf "\r%-80s" ""
    printf "\r${BLUE}⠋${NC} %s" "$message"

    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        frame=$(( (frame + 1) % 10 ))
        printf "\r${BLUE}%s${NC} %s" "${SPINNER_FRAMES[$frame]}" "$message"
        sleep $delay
    done
    printf "\r${GREEN}✓${NC} %s\n" "$message"
}

# Run command with spinner for non-verbose operations
run_with_spinner() {
    # Execute a command while optionally showing a spinner for progress indication.
    local cmd="$1"
    local msg="$2"
    local show_output="${3:-false}"
    local result=0

    if [ "$quiet_mode" = true ]; then
        eval "$cmd" > /dev/null 2>&1 || result=$?
    elif [ "$show_output" = true ]; then
        eval "$cmd" || result=$?
    else
        eval "$cmd" > /dev/null 2>&1 & spinner $! "$msg"
        wait $! || result=$?
    fi

    [ $result -ne 0 ] && handle_error "Command failed: $cmd (Exit code: $result)"
    return $result
}

# Helper function to escape paths
escape_path() {
    # Prepare a file path by escaping any special characters.
    local path="$1"
    printf "%q" "$path"
}

# Help message
show_help() {
    # Display usage instructions and list available commands and options.
    cat << EOF
Yonix - NixOS System Management Utility v${VERSION}

Usage:
    yonix <command> [options]

Commands:
    update, u        Update the current system configuration
    upgrade, U       Upgrade (inputs) and update the current system configuration
    clean, c         Clean up old generations and cache
    trace, t         Rebuild with trace information
    build, b         Build a new system configuration
    dir, d           Show current NixOS configuration directory
    reset-dir, rd    Reset location of configuration directory to default
    git-check, g     Check git repository status and updates

Options:
    --no-flakes   Run without flakes support
    --legacy      Use --fast (Deprecated) instead of --no-reexec
    --remove      Remove everything from /etc/nixos before operation
    -h, --help    Show this help message
    -v, --version Show version information
    -q, --quiet   Suppress spinner and progress output

Examples:
    yonix update              # Update system with flakes
    yonix u --no-flakes       # Update system without flakes
    yonix upgrade -q          # Quiet upgrade
    yonix build               # Build new system
    yonix dir                 # Show config directory
    yonix reset-dir           # Reset directory configuration

EOF
}

# Add function to check for required configuration files
check_nix_config() {
    # Verify that a valid NixOS configuration file (flake.nix or configuration.nix) exists.
    if [ ! -f "flake.nix" ] && [ ! -f "configuration.nix" ]; then
        handle_error "No flake.nix or configuration.nix found in $(pwd)"
    fi
}

# Error handling
handle_error() {
    # Output an error message and exit the script.
    log_error "An error occurred: $1"
    exit 1
}

# Check if rsync present on system
check_rsync() {
    # Confirm that 'rsync' is installed; prompt to open a nix-shell to install it if missing.
    if ! command -v rsync &> /dev/null; then
        log_warning "rsync is not installed"
        echo -e "${YELLOW}Would you like to enter nix-shell with rsync? (y/N)${NC}"
        read -r answer
        if [[ "$answer" == "y" ]]; then
            nix-shell -p rsync
        else
            handle_error "rsync is required for this operation"
        fi
    fi
}

# Add after the check_rsync function
check_git() {
    # Confirm that 'git' is installed; prompt to open a nix-shell if it is missing.
    if ! command -v git &> /dev/null; then
        log_warning "git is not installed"
        echo -e "${YELLOW}Would you like to enter nix-shell with git? (y/N)${NC}"
        read -r answer
        if [[ "$answer" == "y" ]]; then
            nix-shell -p git
        else
            handle_error "git is required for this operation"
        fi
    fi
}

check_git_updates() {
    # Check if the local git repository is behind the remote; offer to pull updates if necessary.
    if [ -d ".git" ]; then
        git remote update &> /dev/null
        UPSTREAM=${1:-'@{u}'}
        LOCAL=$(git rev-parse @)
        REMOTE=$(git rev-parse "$UPSTREAM")
        BASE=$(git merge-base @ "$UPSTREAM")

        if [ "$LOCAL" = "$REMOTE" ]; then
            log_info "Git repository is up to date"
            return 0
        elif [ "$LOCAL" = "$BASE" ]; then
            log_warning "Git repository needs to be updated"
            echo -e "${YELLOW}Would you like to pull updates? (y/N)${NC}"
            read -r answer
            if [[ "$answer" == "y" ]]; then
                run_with_spinner "git pull" "Pulling updates from remote repository" true
                return 2  # Signal that we updated
            fi
            return 1
        fi
    fi
    return 0
}

# Add new function near other command functions
check_git_status() {
    # Show the current git branch and status; then check and optionally update from upstream.
    log_info "Checking git repository status..."
    check_git
    check_nix_config

    if [ ! -d ".git" ]; then
        log_warning "Not a git repository"
        return 1
    fi

    # Show current branch
    local branch=$(git branch --show-current)
    echo -e "${BLUE}Current branch:${NC} $branch"

    # Show status
    echo -e "\n${BLUE}Git status:${NC}"
    git status -s

    echo -e ""

    # Check for updates
    check_git_updates

    return 0
}

# Add helper to copy configuration files (for update and upgrade)
copy_config_files() {
    # Copy the current configuration files to /etc/nixos using rsync.
    save_nix_dir

    # Handle removal if flag is set
    if [ "$remove_nixos" = true ]; then
        log_warning "Removing all content from /etc/nixos"
        run_with_spinner "sudo rm -rf /etc/nixos/ && sudo mkdir /etc/nixos" "Removing /etc/nixos contents" false
    elif [ ! -d "/etc/nixos" ]; then
        run_with_spinner "sudo mkdir -p /etc/nixos" "Creating /etc/nixos directory" false
    fi

    local current_dir
    current_dir=$(escape_path "$(pwd)")
    run_with_spinner "sudo rsync -av --exclude='.git' --update \"${current_dir}/\" /etc/nixos/" "Copying configuration files to /etc/nixos" false
}

# Add helper to prepare /etc/nixos directory (for trace and build)
prepare_nixos_directory() {
    # Conditionally clear the existing /etc/nixos directory based on remove_nixos flag
    if [ "$remove_nixos" = true ]; then
        log_warning "Removing all content from /etc/nixos"
        run_with_spinner "sudo rm -rf /etc/nixos/ && sudo mkdir /etc/nixos" "Removing /etc/nixos contents" false
    elif [ ! -d "/etc/nixos" ]; then
        run_with_spinner "sudo mkdir -p /etc/nixos" "Creating /etc/nixos directory" false
    fi

    save_nix_dir
    local current_dir
    current_dir=$(escape_path "$(pwd)")
    run_with_spinner "sudo rsync -av --exclude='.git' --update \"${current_dir}/\" /etc/nixos/" "Copying configuration files to /etc/nixos" false
}

update_system() {
    # Perform a system update: validate configuration, possibly update git, copy files, and rebuild.
    log_info "Starting system update..."
    check_rsync

    # Only run git operations on first execution (non-sudo)
    if [ "$SUDO_REEXEC" = false ]; then
        check_git
        check_nix_config

        check_git_updates
        local git_status=$?

        if [ $git_status -eq 2 ]; then
            log_success "Git repository updated successfully"
        fi
    fi

    check_sudo

    copy_config_files
    cd /etc/nixos || handle_error "Failed to change directory"

    # Run rebuild showing output
    command_fast="--no-reexec"
    if [ "$legacy_fast" = true ]; then
        command_fast="--fast"
    fi

    if [ "$use_flakes" = true ]; then
        log_info "Rebuilding system with flakes..."
        if sudo nixos-rebuild switch $command_fast --flake .; then
            log_success "System update completed"
        else
            handle_error "System update failed"
        fi
    else
        log_info "Rebuilding system..."
        if sudo nixos-rebuild switch $command_fast; then
            log_success "System update completed"
        else
            handle_error "System update failed"
        fi
    fi
}

upgrade_system() {
    # Upgrade the system: optionally update the git repo, then copy files and rebuild.
    log_info "Starting system upgrade..."
    check_rsync

    # Only run git operations on first execution (non-sudo)
    if [ "$SUDO_REEXEC" = false ]; then
        check_git
        check_nix_config

        check_git_updates
        local git_status=$?

        if [ $git_status -eq 2 ]; then
            log_success "Git repository updated successfully"
        fi
    fi

    check_sudo

    copy_config_files
    cd /etc/nixos || handle_error "Failed to change directory"

    # Run upgrade showing output
    if [ "$use_flakes" = true ]; then
        log_info "Updating flake..."
        if ! sudo nix flake update; then
            handle_error "Flake update failed"
        fi
        log_info "Upgrading system with flakes..."
        if sudo nixos-rebuild switch --upgrade --flake .; then
            log_success "System upgrade completed"
        else
            handle_error "System upgrade failed"
        fi
    else
        log_info "Upgrading system..."
        if sudo nixos-rebuild switch --upgrade; then
            log_success "System upgrade completed"
        else
            handle_error "System upgrade failed"
        fi
    fi
}

clean_system() {
    # Clean up old system generations, logs, and optimize the nix store.
    log_info "Starting system cleanup..."
    check_sudo
    cd /etc/nixos || handle_error "Failed to change directory"

    # Clean system journals and logs
    run_with_spinner "sudo journalctl --vacuum-time=2d" "Cleaning journals (2d+)" false
    run_with_spinner "sudo rm -rf /tmp/* /var/tmp/*" "Cleaning temporary files" false

    # Clean Docker if installed
    if command -v docker &> /dev/null; then
        run_with_spinner "docker system prune -af" "Cleaning unused Docker resources" false
        run_with_spinner "docker volume prune -f" "Cleaning unused Docker volumes" false
    fi

    # Clean Podman if installed
    if command -v podman &> /dev/null; then
        run_with_spinner "podman system prune -af" "Cleaning unused Podman resources" false
        run_with_spinner "podman volume prune -f" "Cleaning unused Podman volumes" false
    fi

    # Clean package caches
    run_with_spinner "sudo rm -rf /var/cache/nixos/*" "Cleaning NixOS cache" false

    # Clean Nix store and generations
    run_with_spinner "sudo nix-env --delete-generations 14d" "Removing old generations (14d+)" false
    run_with_spinner "sudo nix-store --gc --print-dead" "Collecting garbage from nix-store" false
    run_with_spinner "sudo rm /nix/var/nix/gcroots/auto/*" "Removing gcroots from nix-store" false
    run_with_spinner "sudo nix-collect-garbage -d" "Removing garbage" false
    run_with_spinner "sudo nix-store --optimise" "Optimizing store" false

    log_success "System cleanup completed"
}

trace_build() {
    # Rebuild the system with trace information for debugging.
    log_info "Starting trace build..."
    check_sudo
    check_rsync
    check_nix_config

    prepare_nixos_directory
    cd /etc/nixos || handle_error "Failed to change directory"

    # Run trace build showing output
    if [ "$use_flakes" = true ]; then
        log_info "Building with trace (flakes)..."
        sudo nixos-rebuild switch --flake . --show-trace
    else
        log_info "Building with trace..."
        sudo nixos-rebuild switch --show-trace
    fi
    log_success "Trace build completed"
}

build_new() {
    # Build a new system configuration: set hostname and rebuild based on current settings.
    log_info "Starting new build..."
    check_sudo
    check_rsync
    check_nix_config

    prepare_nixos_directory

    read -p "Enter hostname: " hostname
    sudo hostname $hostname || handle_error "Failed to set hostname"
    cd /etc/nixos || handle_error "Failed to change directory"

    # Run build showing output
    if [ "$use_flakes" = true ]; then
        log_info "Building new system with flakes..."
        sudo nixos-rebuild switch --flake .
    else
        log_info "Building new system..."
        sudo nixos-rebuild switch
    fi
    log_success "New build completed"
}

# Add new function to show nix directory
show_nix_dir() {
    # Display the current NixOS configuration directory and check for configuration files.
    local dir=$(get_nix_dir)
    echo -e "${BLUE}NixOS configuration directory:${NC} $dir"
    if [ -f "$dir/flake.nix" ]; then
        echo -e "${GREEN}✓${NC} Flake configuration found"
    elif [ -f "$dir/configuration.nix" ]; then
        echo -e "${GREEN}✓${NC} Traditional configuration found"
    else
        echo -e "${YELLOW}!${NC} No configuration files found"
    fi
}

# Default settings
use_flakes=true
legacy_fast=false
quiet_mode=false
remove_nixos=false
command=""

# Add function to check for updates in current directory (max 2 levels deep) and nix-dir
check_for_updates() {
    local current_dir="$(pwd)"
    local nix_dir="$(get_nix_dir)"
    local current_version="$VERSION"
    local newest_version=""
    local newest_file=""

    # Search for yonix files in current directory and subdirectories (max 2 levels)
    while IFS= read -r file; do
        if [[ -f "$file" && -x "$file" ]]; then
            local ver=$(grep "^VERSION=" "$file" | cut -d'"' -f2)
            if [[ ! -z "$ver" && "$ver" > "$current_version" ]]; then
                newest_version="$ver"
                newest_file="$file"
            fi
        fi
    done < <(find "$current_dir" -maxdepth 2 -name "yonix" 2>/dev/null)

    # Also check nix-dir if it exists and is different from current directory
    if [[ -d "$nix_dir" && "$nix_dir" != "$current_dir" ]]; then
        while IFS= read -r file; do
            if [[ -f "$file" && -x "$file" ]]; then
                local ver=$(grep "^VERSION=" "$file" | cut -d'"' -f2)
                if [[ ! -z "$ver" && "$ver" > "$current_version" ]]; then
                    newest_version="$ver"
                    newest_file="$file"
                fi
            fi
        done < <(find "$nix_dir" -name "yonix" 2>/dev/null)
    fi

    log_info "Searching for newer version"
    if [[ ! -z "$newest_file" ]]; then
        log_info "Found newer version v${newest_version} in ${newest_file}"
        echo -e "${YELLOW}Would you like to update? (y/N)${NC}"
        read -r answer
        if [[ "$answer" == "y" ]]; then
            cp "$newest_file" "$HOME/.local/bin/yonix"
            chmod +x "$HOME/.local/bin/yonix"
            log_success "Updated to v${newest_version}"
            exec "$HOME/.local/bin/yonix" "${ORIGINAL_ARGS[@]}"
        fi
    fi
}

# Modify ensure_installed to include update check
ensure_installed() {
    local target_dir="$HOME/.local/bin"
    local target_path="$target_dir/yonix"
    local current_path="$(realpath "$0")"
    local current_version="$VERSION"
    local installed_version=""

    # Check if already installed and get version
    if [ -f "$target_path" ]; then
        installed_version=$(grep "^VERSION=" "$target_path" | cut -d'"' -f2)
    fi

    # Create ~/.local/bin if it doesn't exist
    if [ ! -d "$target_dir" ]; then
        mkdir -p "$target_dir"
    fi

    # Add ~/.local/bin to PATH if not already present
    if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
        echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$HOME/.bashrc"
        export PATH="$HOME/.local/bin:$PATH"
    fi

    # Install script if not installed or different version
    if [ "$current_path" != "$target_path" ] || [ "$current_version" != "$installed_version" ]; then
        cp "$current_path" "$target_path"
        chmod +x "$target_path"
        log_success "Installed yonix v${VERSION} to $target_path"
        if [ "$current_path" != "$target_path" ]; then
            exec "$target_path" "${ORIGINAL_ARGS[@]}"
        fi
    fi

    # Check for updates in current directory
    check_for_updates
}

# Move ensure_installed before sudo check to allow local installation first
ensure_installed "$@"

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        update|u)
            command="update"
            shift
            ;;
        upgrade|U)
            command="upgrade"
            shift
            ;;
        clean|c)
            command="clean"
            shift
            ;;
        trace|t)
            command="trace"
            shift
            ;;
        build|b)
            command="build"
            shift
            ;;
        dir|d)
            command="dir"
            shift
            ;;
        reset-dir|rd)
            command="reset-dir"
            shift
            ;;
        git-check|g)
            command="git-check"
            shift
            ;;
        --no-flakes)
            use_flakes=false
            shift
            ;;
        --legacy)
            legacy_fast=true
            shift
            ;;
        --remove)
            remove_nixos=true
            shift
            ;;
        -q|--quiet)
            quiet_mode=true
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        -v|--version)
            echo "Yonix v${VERSION}"
            exit 0
            ;;
        *)
            log_error "Unknown argument: $1"
            show_help
            exit 1
            ;;
    esac
done

# Modify spinner function if quiet mode is enabled
if [ "$quiet_mode" = true ]; then
    spinner() {
        local pid=$1
        while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do sleep 0.1; done
    }
fi

# Add directory check before executing commands
if [ ! -z "$command" ]; then
    if [ -f "flake.nix" ] || [ -f "configuration.nix" ]; then
        true # We're in the right place
    else
        nix_dir=$(get_nix_dir)
        if [ -d "$nix_dir" ]; then
            cd "$nix_dir" || handle_error "Failed to change to NixOS configuration directory: $nix_dir"
            # log_info "Changing to nix directory: $nix_dir"
        else
            handle_error "No NixOS configuration found in current directory and no valid configuration directory set"
        fi
    fi
fi

# Execute requested command
case $command in
    update)
        update_system
        ;;
    upgrade)
        upgrade_system
        ;;
    clean)
        clean_system
        ;;
    trace)
        trace_build
        ;;
    build)
        build_new
        ;;
    dir)
        show_nix_dir
        ;;
    reset-dir)
        reset_nix_dir
        ;;
    git-check)
        check_git_status
        ;;
esac

# Execute command
if [ -z "$command" ]; then
    show_help
    log_error "No command specified"
    exit 1
fi
